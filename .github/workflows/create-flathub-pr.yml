name: Create Flathub PR on Tag

on:
  push:
    tags:
      - 'v*.*.*'  # Trigger on version tags like v1.2.3
  workflow_dispatch:  # Allow manual triggering

jobs:
  create-flathub-pr:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for accurate commit info

    - name: Extract version info
      id: version
      run: |
        # Extract tag name and commit hash
        TAG_NAME=${GITHUB_REF#refs/tags/}
        COMMIT_HASH=$(git rev-parse $TAG_NAME)
        VERSION=${TAG_NAME#v}  # Remove 'v' prefix
        
        echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
        echo "commit_hash=$COMMIT_HASH" >> $GITHUB_OUTPUT
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
        echo "üì¶ Processing release: $TAG_NAME"
        echo "üîç Commit hash: $COMMIT_HASH" 
        echo "üìà Version: $VERSION"

    - name: Create Flathub PR
      env:
        GITHUB_TOKEN: ${{ secrets.FLATHUB_TOKEN }}  # Personal access token for Flathub repo
      run: |
        # Clone the Flathub repository
        FLATHUB_REPO="flathub/io.github.tobagin.digger"
        
        echo "üîÑ Cloning Flathub repository..."
        git clone https://x-access-token:${GITHUB_TOKEN}@github.com/$FLATHUB_REPO.git flathub-repo
        cd flathub-repo
        
        # Configure git
        git config user.email "action@github.com"
        git config user.name "GitHub Action (Digger Updates)"
        
        # Stay on main branch (no branch creation)
        
        # Update the manifest directly in the Flathub repository
        python3 << EOF
        import re
        import sys
        
        tag_name = "${{ steps.version.outputs.tag_name }}"
        commit_hash = "${{ steps.version.outputs.commit_hash }}"
        manifest_file = "io.github.tobagin.digger.yml"
        
        with open(manifest_file, 'r') as f:
            content = f.read()
        
        # Pattern to find and update the digger module's tag and commit
        # Handle both Digger.git and digger.git URLs (case insensitive)
        digger_section = r'(- name: digger.*?sources:.*?- type: git.*?url: https://github\.com/tobagin/[Dd]igger\.git.*?tag: )v[0-9]+\.[0-9]+\.[0-9]+(.*?commit: )[a-f0-9]{40}'
        
        # Update both tag and commit in the digger module
        replacement = rf'\g<1>{tag_name}\g<2>{commit_hash}'
        updated_content = re.sub(digger_section, replacement, content, flags=re.MULTILINE | re.DOTALL)
        
        if updated_content != content:
            with open(manifest_file, 'w') as f:
                f.write(updated_content)
            print("‚úÖ Successfully updated Flathub manifest")
            print(f"‚úÖ Updated tag to: {tag_name}")
            print(f"‚úÖ Updated commit to: {commit_hash}")
        else:
            print("‚ùå No changes made to Flathub manifest")
            print("Debug: Searching for digger section...")
            
            # Debug: show what we're looking for and what we found
            lines = content.split('\n')
            in_digger = False
            for i, line in enumerate(lines):
                if '- name: digger' in line:
                    in_digger = True
                    print(f"Line {i+1}: {line}")
                elif line.strip().startswith('- name:') and in_digger:
                    break
                elif in_digger:
                    print(f"Line {i+1}: {line}")
            
            # Test if the pattern works at all
            import re
            test_matches = re.search(digger_section, content, re.MULTILINE | re.DOTALL)
            if test_matches:
                print(f"Pattern found match: {test_matches.groups()}")
            else:
                print("Pattern did not match - checking simpler patterns...")
                # Try to find tag and commit lines separately
                tag_lines = [i for i, line in enumerate(lines) if 'tag: v' in line]
                commit_lines = [i for i, line in enumerate(lines) if 'commit: ' in line and len(line.split()[-1]) == 40]
                print(f"Found tag lines: {tag_lines}")
                print(f"Found commit lines: {commit_lines}")
            
            sys.exit(1)
        EOF
        
        # Commit and push changes directly to main
        git add io.github.tobagin.digger.yml
        git commit -m "Update to ${{ steps.version.outputs.tag_name }}

        üöÄ **New Release: ${{ steps.version.outputs.tag_name }}**
        
        **Changes:**
        - Updated tag from previous version to ${{ steps.version.outputs.tag_name }}
        - Updated commit hash to ${{ steps.version.outputs.commit_hash }}
        - Automated update from upstream repository
        
        **Source:** https://github.com/tobagin/digger/releases/tag/${{ steps.version.outputs.tag_name }}
        
        ---
        *This update was automatically pushed by GitHub Actions*"
        
        # Push directly to master (Flathub uses master branch)
        git push https://x-access-token:${GITHUB_TOKEN}@github.com/$FLATHUB_REPO.git master
        
        echo "‚úÖ Changes pushed directly to master: https://github.com/$FLATHUB_REPO"

    - name: Summary
      if: always()
      run: |
        echo "## üìã Flathub PR Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Tag:** \`${{ steps.version.outputs.tag_name }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Commit:** \`${{ steps.version.outputs.commit_hash }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Version:** \`${{ steps.version.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "‚úÖ **Changes Pushed:** Update committed directly to master branch" >> $GITHUB_STEP_SUMMARY
        echo "üìù **Note:** Local manifest should be updated manually in your repository" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Next Steps:**" >> $GITHUB_STEP_SUMMARY
        echo "1. Update the local Flatpak manifest manually" >> $GITHUB_STEP_SUMMARY
        echo "2. Monitor the Flathub repository for CI build status" >> $GITHUB_STEP_SUMMARY
        echo "3. The new version will be published to Flathub automatically" >> $GITHUB_STEP_SUMMARY